#question 8
def findErrorNums(nums):
    seen = set()
    duplicate = -1
    missing = -1

    for num in nums:
        if num in seen:
            duplicate = num
        seen.add(num)

    n = len(nums)
    expected_sum = (n * (n + 1)) // 2
    actual_sum = __builtins__.sum(seen)  # Use __builtins__.sum() instead of sum
    missing = expected_sum - actual_sum

    return [duplicate, missing]

# Test case
nums = [1, 2, 2, 2,5]
result = findErrorNums(nums)
print(result)  # Output: [2, 3, 4] ---[2,7] where 3+4=7 ie adding up the missing elelments

#TC - O(n)
#SC - O(n)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
#question 8
#idea2
def findDuplicateAndMissing(nums):
    n = len(nums)
    nums_set = set()
    duplicate = -1
    missing_nums = []

    for num in nums:                    #O(n)
        if num in nums_set:
            duplicate = num
        nums_set.add(num)

    for num in range(1, n + 1):         #O(1)
        if num not in nums_set:
            missing_nums.append(num)

    return [duplicate] + missing_nums

# Test case
nums = [1, 2, 2, 2, 5]
result = findDuplicateAndMissing(nums)
print(result)  # Output: [2, 3, 4] without adding the missing elements

#TC - O(n)
#SC - O(n)
